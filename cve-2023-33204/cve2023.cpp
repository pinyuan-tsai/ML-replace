// import math
// n = 4294967295
// print(n/10**int(math.log10(n)+1))

// def test_overflow(input):
//     #print(input[0])
//     if input[0] > 4294967295:
//         return 1
//     else:
//         return 0

// def run_test(input1,input2,size):
//     suss = 0
//     for i in range(0,size):
//         if(test_overflow(input1[i]) == test_overflow(input2[i])):
//             suss = suss+ 1
//         else:
//             print(input1[i],input2[i])
//     return suss

// def get_int_rand(n):
//     result1=[]
//     result2=[]
//     result3=[]
//     #print(n)
//     for i in range(0,n):
//         ratio1 = random.randint(1,10)
//         ratio2 = random.randint(1,10)
//         ratio3 = random.randint(1,10)
//         int1 = random.randint(1,10**ratio1)
//         int2 = random.randint(1,10**ratio2)
//         int3 = random.randint(1,10**ratio3)
//         result3 +=[[int(math.log10(int1)+1) + int(math.log10(int2)+1) +int(math.log10(int3)+1)]]
//         result2 +=[[int1*int2*int3]]
//         int1 = int1/10**int(math.log10(int1)+1)
//         int2 = int2/10**int(math.log10(int2)+1)
//         int3 = int3/10**int(math.log10(int3)+1)
//         result1 +=[[int1,int2,int3]]
//     return np.array(result1),np.array(result2),np.array(result3)

#include <fdeep/fdeep.hpp>
#include <iostream>
#include <vector>
#include <string>
#include <ctime>
#include <cmath>
#include <iomanip>
using namespace std;
auto model = fdeep::load_model("CVE2023.json");
vector<vector<float>> vec;
vector<int> in;
vector<unsigned long long> ans;

    int count_digit(unsigned long long num){
        string tmp;
        tmp = to_string(num);
        return tmp.size();
    }

    void get_int_rand(int n){
        // float x1 = rand();
        // cout << x1<<endl;
        // cout << pow(10,count_digit(x1))<<endl;
        // x1 = x1 / pow(10,count_digit(x1));
        // cout << x1<<endl;
        srand( time(NULL) );
        for(int i =0 ; i < n; i++ ){
            unsigned long long x1 = 4294967294;
            unsigned long long x2 = 4294967295;
            unsigned long long x3 = 2147483648;
            ans.push_back(x1*x2*x3);
            //cout << x1 <<" "<<x2<<" "<<x3<<endl;
            int d1 = count_digit(x1);
            int d2 = count_digit(x2);
            int d3 = count_digit(x3);
            in.push_back({d1+d2+d3});

            float p1 = x1 / pow(10,count_digit(x1));
            float p2 = x2 / pow(10,count_digit(x2));
            float p3 = x3 / pow(10,count_digit(x3));
            vec.push_back({p1,p2,p3});


            
            for(int j = 0 ; j < 3; j++){
                cout << setprecision(10);
                cout << vec[i][j]<<" ";
            }
            cout<<endl;
            cout << endl;
            // for(int j = 0 ; j < 3; j++){
            //     cout << in[i][j]<<" ";
            // }
            cout <<endl;
        }

    }
extern "C"
{   
    

    int myCPP(){
        get_int_rand(1);
        // for(int i = 0 ; i < vec.size(); i++){
        const auto result = model.predict({fdeep::tensor(fdeep::tensor_shape(static_cast<std::size_t>(3)),vec[0])}).at(0).to_vector();
        cout <<result[0] * pow(10,in[0]) <<" "<<ans[0]<<endl;
        // }
        if(result[0] * pow(10,in[0]) < UINT_MAX)    return 0;

        return 1;
        //return result[0];
    }
}